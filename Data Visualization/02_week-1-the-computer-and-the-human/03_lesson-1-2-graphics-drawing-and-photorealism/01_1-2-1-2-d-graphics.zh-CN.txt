对于大多数数据可视化任务, 我们只是需要二维计算机图形学来绘制和显示数据。 为了做到这一点, 我们需要使用不同的坐标系。 我们使用不同的坐标系来绘制数据, 而不是用来显示数据。 当我们可视化数据时, 我们将使用二维图形。 我们习惯于使用二维图形, 例如, 绘制函数, 所以我们将重点放在 二维图形现在, 我们看的方法, 使用图形可视化。 我们会学到
矢量图形和光栅图形的区别 用于指定二维图形和光栅图形, 用于显示二维图形。 然后我们将详细地查看坐标系中每个它们所使用的坐标系统。 矢量图形是用于绘制的图形。 我们已经习惯画画了。我们拿一支钢笔, 把笔放在 一点, 然后我们将我们的钢笔移动跨越 纸张, 然后举起我们的钢笔在另一个点, 你得到 一条很好的直线-一条很好的连续线。 在光栅图形中, 这是使用的图形, 例如, 我们的电视机和手机; 它们是像素的直线数组, 这些像素是指定的颜色。 通过指定某些像素的某些颜色, 您可以代表相同的形状。 因此, 您将绘制一个形状使用矢量图形; 你将描述一个点, 你想 启动要停止的行和点 一条线, 你会-你会得到 一条直线或它们之间的平滑曲线。 这些将被转换为光栅图形显示, 这将包括的像素, 得到照亮沿 该路径以显示您用矢量图形描述的路径。 所以这个过程叫做栅格化。 因此, 我们将指定一个原始的 以矢量图形格式-我们将描述顶点, 点在飞机上。 然后我们将用笔画连接这些点-在这种情况下, 用直线, 但它们可能是弯曲的路径, 然后这些笔画可以包围一个区域。 因此, 我们可以填充该区域-我们可以为该区域指定颜色。 对于可能分配颜色和宽度的笔画, 中风或中风的程式化, 用虚线等表示。 栅格化的过程从这些基元定义的 这些数据点和转换 它们放入一个像素数组中, 以便可以显示它们。 所以这个三角形的光栅格式表示是作为一个像素数组。 虚线表示左边的原始原语, 叠加在表示它的像素数组中。 在这种情况下, 我们有像素沿边缘 颜色为粉红色的填充区域中的彩色蓝色和像素。 你注意到当我们栅格化一个形状时, 我们可以得到混淆。 这是事实, 这条漂亮的直线 在我们的矢量图形表示中, 显示为 staircased 行。 当你栅格化一条平滑的直线时, 你会得到一级分别的工件。 因为那些 stairsteps 试着看起来像原来的线, 但看起来有点不同, 我们称之为别名; 这个问题被称为别名。 当我们在两个维度中绘制基元时-当我们想要 若要绘制二维图形的形状, 例如, 对于绘制函数, 我们需要一个坐标系统 在其中绘制这些形状, 以便我们知道放置顶点的位置, 例如, 三角形。 所以我们需要定义一个坐标系。 这些坐标, 我将调用画布坐标; 它们是我们要绘制的坐标。 在这种情况下, 画布坐标被定义为从负1开始, 减去1 到 1, 1, 所以他们建立了这一平面的平方区域。 起源将在这里在中间。 你可以任意定义
你的画布坐标系 您希望将它们定义为方便的东西, 以便您可以 画你的形状，没有很多麻烦。 在这种情况下, 我画了一个抛物线的情节-抛物线 y 等于 x 的平方。 所以我有一个弯曲的路径开始在这里这里要到这里的这一点 我已经定义了我的画布坐标系统是一个方便的情节。 在这种情况下, 我已经开始从负 1/8, 减去1/8 到 1/8, 一和1/8。 所以, 当我移动 1/8, 1/8 在, 我在点 0, 0 在我的坐标系中, 我可以画出我的剧情从 0, 0 到 1, 1 在这里。 然后我有一个额外的第八单位 围绕图, 添加元数据, 就像可视化的标题, 绘制坐标轴并标记坐标轴。 所以这很方便, 但当我调整显示器的大小时, 我可能希望字体更大或 小, 我需要一个更大的边缘周围的情节。 或者, 我可能希望该情节更大, 边缘更小。 所以在二维计算机图形学中, 我们可以建立层次坐标系。 这就意味着画布上有画布。 在这种情况下, 我们有一个黄色的画布, 是坐标系统的 整个情节-整个 可视化-然后我们有 内画布, 是用于绘制数据的坐标系统; 在这种情况下, 抛物线。 所以我建立了外部坐标系, 从 0, 0 到 1, 1在这个区域, 然后我已经建立了一个内部坐标系去 从1/10 到9/10 和 1/10, 1/10 到 9/10, 9/10 在这里, 我已经定义了它的坐标系从 0, 0 到 1, 1。 所以现在我可以在里面画图 这个坐标系使用的坐标, 方便绘图 这个抛物线, 然后我可以画图在 这个外坐标系使用坐标方便绘制装饰品, 坐标轴和标题。 所以我们可以定义任何我们想要的坐标系, 无论我们想要什么, 为了使它更方便地绘制二维图形。 还有屏幕坐标。 这些是用于光栅图形的坐标, 用于显示信息。 在这个坐标系中, 我们有一个网格从 0, 0, 无论我们的屏幕分辨率。 在这种情况下, 因为我们要从 0, 0, 我们去我们的水平分辨率减去 1, 垂直分辨率减去1。 如果我们的屏幕分辨率是 100, 100, 我们要从 0, 0 到 99, 99。 像素位于这些网格相交处。 因此, 每个像素位置都有一个整数坐标, 当您实际使用这些像素显示图像时, 该方法非常有用。 您希望能够找到这些像素中的每一个。 因此, 出现了一个画布到屏幕的转换。 所以我们要定义我们的坐标系统从一些左 底部指向一些右上角 然后-然后我们将使用这些坐标进行绘制。 这些坐标将被转换为 显示屏幕上相应的像素位置。 这些像素位置将被定义 显示屏幕上的某个地方从 x 开始, y 和去点 x 加上宽度 以像素减去 1, 然后 y 加上高度 (以像素为单位) 减去1。 所以这个坐标系会自动发生, 你可以定义这些坐标来 任何东西, 你可以定义这些坐标是任何位置在屏幕上。 所以你的2D 图形, 你正在画图 您的画布可以自动调整大小, 并 重新定位在屏幕上的任何地方只是通过 控制此画布到屏幕的转换。 您还可以通过设置在屏幕坐标中直接工作 一个画布到屏幕的转换, 它使用 与屏幕坐标匹配的画布坐标。 在这种情况下, 你只是设置你的左边缘和你的底部边缘到 x 和 y 你是正确的边缘和你的上边缘 x 和 y 加上宽度减去1和高度减去1。 在这种情况下, 您可以指定基元的坐标在 使用相同坐标的矢量图形 对于它们将被翻译成的像素。 我不建议这样做, 因为当你在屏幕坐标工作, 您将不知道输出屏幕显示设备可能是什么。 可能是手机 它可能是一台电视, 它可能是一只手表, 这可能是一个视频墙-所有这些将有不同的解决方案 你要确保你的二维图形正确显示; 它不太小或太大, 当它显示在不同的设备上。 因此, 最好的工作在一些帆布坐标, 这是方便你, 让 画布到屏幕的转换担心 关于将其转换为相应的像素。 这节课我们都学了什么 我们学了矢量图形
用于描述形状 而光栅图用像素表来
显示这些形状 我们可以设置坐标, 这是方便我们在画布上绘制 这些坐标不同于 用于显示画布的光栅坐标。 我们还能在画布中嵌套画布 这使得我们可以用更方便的方式分割屏幕 为我们建立一个二维可视化显示。 所以我们学会了用矢量图形描述形状, 但我们使用光栅图形显示形状。 我们可以使用光栅图形的坐标系来描述我们的形状, 屏幕像素的坐标系统, 或者, 我们可以用我们的矢量图形的画布坐标来描述它们, 或者我们-我们可以使用任何坐标系统是最方便的, 我们绘制数据。