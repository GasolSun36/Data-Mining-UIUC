1
00:00:00,000 --> 00:00:03,209
对于大多数数据可视化任务,

2
00:00:03,209 --> 00:00:07,740
我们只是需要二维计算机图形学来绘制和显示数据。

3
00:00:07,740 --> 00:00:11,070
为了做到这一点, 我们需要使用不同的坐标系。

4
00:00:11,070 --> 00:00:16,179
我们使用不同的坐标系来绘制数据, 而不是用来显示数据。

5
00:00:16,179 --> 00:00:20,339
当我们可视化数据时, 我们将使用二维图形。

6
00:00:20,339 --> 00:00:23,129
我们习惯于使用二维图形, 例如,

7
00:00:23,129 --> 00:00:26,010
绘制函数, 所以我们将重点放在

8
00:00:26,010 --> 00:00:31,530
二维图形现在, 我们看的方法, 使用图形可视化。

9
00:00:31,530 --> 00:00:36,329
我们会学到
矢量图形和光栅图形的区别

10
00:00:36,329 --> 00:00:40,409
用于指定二维图形和光栅图形,

11
00:00:40,409 --> 00:00:43,169
用于显示二维图形。

12
00:00:43,169 --> 00:00:47,189
然后我们将详细地查看坐标系中每个它们所使用的坐标系统。

13
00:00:47,189 --> 00:00:52,935
矢量图形是用于绘制的图形。

14
00:00:52,935 --> 00:00:56,250
我们已经习惯画画了。我们拿一支钢笔, 把笔放在

15
00:00:56,250 --> 00:00:59,670
一点, 然后我们将我们的钢笔移动跨越

16
00:00:59,670 --> 00:01:03,090
纸张, 然后举起我们的钢笔在另一个点, 你得到

17
00:01:03,090 --> 00:01:07,694
一条很好的直线-一条很好的连续线。

18
00:01:07,694 --> 00:01:10,709
在光栅图形中, 这是使用的图形,

19
00:01:10,709 --> 00:01:13,064
例如, 我们的电视机和手机;

20
00:01:13,064 --> 00:01:18,584
它们是像素的直线数组, 这些像素是指定的颜色。

21
00:01:18,584 --> 00:01:21,704
通过指定某些像素的某些颜色,

22
00:01:21,704 --> 00:01:24,435
您可以代表相同的形状。

23
00:01:24,435 --> 00:01:27,450
因此, 您将绘制一个形状使用矢量图形;

24
00:01:27,450 --> 00:01:29,670
你将描述一个点, 你想

25
00:01:29,670 --> 00:01:31,920
启动要停止的行和点

26
00:01:31,920 --> 00:01:33,504
一条线, 你会-你会得到

27
00:01:33,504 --> 00:01:37,079
一条直线或它们之间的平滑曲线。

28
00:01:37,079 --> 00:01:41,295
这些将被转换为光栅图形显示,

29
00:01:41,295 --> 00:01:45,719
这将包括的像素, 得到照亮沿

30
00:01:45,719 --> 00:01:51,790
该路径以显示您用矢量图形描述的路径。

31
00:01:51,790 --> 00:01:54,930
所以这个过程叫做栅格化。

32
00:01:54,930 --> 00:01:57,909
因此, 我们将指定一个原始的

33
00:01:57,909 --> 00:02:01,632
以矢量图形格式-我们将描述顶点,

34
00:02:01,632 --> 00:02:03,840
点在飞机上。

35
00:02:03,840 --> 00:02:08,460
然后我们将用笔画连接这些点-在这种情况下, 用直线,

36
00:02:08,460 --> 00:02:15,245
但它们可能是弯曲的路径, 然后这些笔画可以包围一个区域。

37
00:02:15,245 --> 00:02:19,240
因此, 我们可以填充该区域-我们可以为该区域指定颜色。

38
00:02:19,240 --> 00:02:22,050
对于可能分配颜色和宽度的笔画,

39
00:02:22,050 --> 00:02:24,610
中风或中风的程式化,

40
00:02:24,610 --> 00:02:26,835
用虚线等表示。

41
00:02:26,835 --> 00:02:32,280
栅格化的过程从这些基元定义的

42
00:02:32,280 --> 00:02:34,860
这些数据点和转换

43
00:02:34,860 --> 00:02:38,435
它们放入一个像素数组中, 以便可以显示它们。

44
00:02:38,435 --> 00:02:44,835
所以这个三角形的光栅格式表示是作为一个像素数组。

45
00:02:44,835 --> 00:02:49,305
虚线表示左边的原始原语,

46
00:02:49,305 --> 00:02:53,580
叠加在表示它的像素数组中。

47
00:02:53,580 --> 00:02:56,099
在这种情况下, 我们有像素沿边缘

48
00:02:56,099 --> 00:03:00,444
颜色为粉红色的填充区域中的彩色蓝色和像素。

49
00:03:00,444 --> 00:03:03,689
你注意到当我们栅格化一个形状时,

50
00:03:03,689 --> 00:03:05,314
我们可以得到混淆。

51
00:03:05,314 --> 00:03:08,414
这是事实, 这条漂亮的直线

52
00:03:08,414 --> 00:03:12,104
在我们的矢量图形表示中,

53
00:03:12,104 --> 00:03:16,370
显示为 staircased 行。

54
00:03:16,370 --> 00:03:21,169
当你栅格化一条平滑的直线时, 你会得到一级分别的工件。

55
00:03:21,169 --> 00:03:25,455
因为那些 stairsteps 试着看起来像原来的线,

56
00:03:25,455 --> 00:03:26,854
但看起来有点不同,

57
00:03:26,854 --> 00:03:28,469
我们称之为别名;

58
00:03:28,469 --> 00:03:30,646
这个问题被称为别名。

59
00:03:30,646 --> 00:03:33,780
当我们在两个维度中绘制基元时-当我们想要

60
00:03:33,780 --> 00:03:36,930
若要绘制二维图形的形状, 例如,

61
00:03:36,930 --> 00:03:40,094
对于绘制函数, 我们需要一个坐标系统

62
00:03:40,094 --> 00:03:43,469
在其中绘制这些形状, 以便我们知道放置顶点的位置,

63
00:03:43,469 --> 00:03:45,280
例如, 三角形。

64
00:03:45,280 --> 00:03:47,925
所以我们需要定义一个坐标系。

65
00:03:47,925 --> 00:03:51,030
这些坐标, 我将调用画布坐标;

66
00:03:51,030 --> 00:03:53,909
它们是我们要绘制的坐标。

67
00:03:53,909 --> 00:03:58,560
在这种情况下, 画布坐标被定义为从负1开始, 减去1

68
00:03:58,560 --> 00:04:03,055
到 1, 1, 所以他们建立了这一平面的平方区域。

69
00:04:03,055 --> 00:04:05,650
起源将在这里在中间。

70
00:04:05,650 --> 00:04:08,895
你可以任意定义
你的画布坐标系

71
00:04:08,895 --> 00:04:11,699
您希望将它们定义为方便的东西, 以便您可以

72
00:04:11,699 --> 00:04:15,354
画你的形状，没有很多麻烦。

73
00:04:15,354 --> 00:04:21,050
在这种情况下, 我画了一个抛物线的情节-抛物线 y 等于 x 的平方。

74
00:04:21,050 --> 00:04:26,355
所以我有一个弯曲的路径开始在这里这里要到这里的这一点

75
00:04:26,355 --> 00:04:31,704
我已经定义了我的画布坐标系统是一个方便的情节。

76
00:04:31,704 --> 00:04:34,459
在这种情况下, 我已经开始从负 1/8,

77
00:04:34,459 --> 00:04:38,790
减去1/8 到 1/8, 一和1/8。

78
00:04:38,790 --> 00:04:40,919
所以, 当我移动 1/8,

79
00:04:40,919 --> 00:04:43,949
1/8 在, 我在点 0, 0

80
00:04:43,949 --> 00:04:50,060
在我的坐标系中, 我可以画出我的剧情从 0, 0 到 1, 1 在这里。

81
00:04:50,060 --> 00:04:53,009
然后我有一个额外的第八单位

82
00:04:53,009 --> 00:04:57,360
围绕图, 添加元数据,

83
00:04:57,360 --> 00:05:02,810
就像可视化的标题, 绘制坐标轴并标记坐标轴。

84
00:05:02,810 --> 00:05:08,610
所以这很方便, 但当我调整显示器的大小时,

85
00:05:08,610 --> 00:05:10,620
我可能希望字体更大或

86
00:05:10,620 --> 00:05:13,439
小, 我需要一个更大的边缘周围的情节。

87
00:05:13,439 --> 00:05:17,504
或者, 我可能希望该情节更大, 边缘更小。

88
00:05:17,504 --> 00:05:20,370
所以在二维计算机图形学中,

89
00:05:20,370 --> 00:05:23,115
我们可以建立层次坐标系。

90
00:05:23,115 --> 00:05:26,790
这就意味着画布上有画布。

91
00:05:26,790 --> 00:05:30,029
在这种情况下, 我们有一个黄色的画布, 是坐标系统的

92
00:05:30,029 --> 00:05:33,329
整个情节-整个

93
00:05:33,329 --> 00:05:35,610
可视化-然后我们有

94
00:05:35,610 --> 00:05:40,425
内画布, 是用于绘制数据的坐标系统;

95
00:05:40,425 --> 00:05:41,939
在这种情况下, 抛物线。

96
00:05:41,939 --> 00:05:46,230
所以我建立了外部坐标系, 从 0, 0 到 1,

97
00:05:46,230 --> 00:05:50,579
1在这个区域, 然后我已经建立了一个内部坐标系去

98
00:05:50,579 --> 00:05:56,159
从1/10 到9/10 和 1/10,

99
00:05:56,159 --> 00:05:58,050
1/10 到 9/10, 9/10

100
00:05:58,050 --> 00:06:03,509
在这里, 我已经定义了它的坐标系从 0, 0 到 1, 1。

101
00:06:03,509 --> 00:06:05,115
所以现在我可以在里面画图

102
00:06:05,115 --> 00:06:09,720
这个坐标系使用的坐标, 方便绘图

103
00:06:09,720 --> 00:06:12,115
这个抛物线, 然后我可以画图在

104
00:06:12,115 --> 00:06:16,975
这个外坐标系使用坐标方便绘制装饰品,

105
00:06:16,975 --> 00:06:19,199
坐标轴和标题。

106
00:06:19,199 --> 00:06:22,560
所以我们可以定义任何我们想要的坐标系,

107
00:06:22,560 --> 00:06:27,975
无论我们想要什么, 为了使它更方便地绘制二维图形。

108
00:06:27,975 --> 00:06:30,660
还有屏幕坐标。

109
00:06:30,660 --> 00:06:33,899
这些是用于光栅图形的坐标,

110
00:06:33,899 --> 00:06:36,485
用于显示信息。

111
00:06:36,485 --> 00:06:38,459
在这个坐标系中,

112
00:06:38,459 --> 00:06:45,629
我们有一个网格从 0, 0, 无论我们的屏幕分辨率。

113
00:06:45,629 --> 00:06:47,699
在这种情况下, 因为我们要从 0, 0,

114
00:06:47,699 --> 00:06:52,595
我们去我们的水平分辨率减去 1, 垂直分辨率减去1。

115
00:06:52,595 --> 00:06:55,814
如果我们的屏幕分辨率是 100, 100,

116
00:06:55,814 --> 00:06:59,374
我们要从 0, 0 到 99, 99。

117
00:06:59,374 --> 00:07:05,295
像素位于这些网格相交处。

118
00:07:05,295 --> 00:07:10,379
因此, 每个像素位置都有一个整数坐标,

119
00:07:10,379 --> 00:07:16,254
当您实际使用这些像素显示图像时, 该方法非常有用。

120
00:07:16,254 --> 00:07:19,826
您希望能够找到这些像素中的每一个。

121
00:07:19,826 --> 00:07:24,134
因此, 出现了一个画布到屏幕的转换。

122
00:07:24,134 --> 00:07:28,529
所以我们要定义我们的坐标系统从一些左

123
00:07:28,529 --> 00:07:32,339
底部指向一些右上角

124
00:07:32,339 --> 00:07:36,269
然后-然后我们将使用这些坐标进行绘制。

125
00:07:36,269 --> 00:07:39,089
这些坐标将被转换为

126
00:07:39,089 --> 00:07:42,609
显示屏幕上相应的像素位置。

127
00:07:42,609 --> 00:07:45,209
这些像素位置将被定义

128
00:07:45,209 --> 00:07:48,120
显示屏幕上的某个地方从 x 开始,

129
00:07:48,120 --> 00:07:52,555
y 和去点 x 加上宽度

130
00:07:52,555 --> 00:07:57,660
以像素减去 1, 然后 y 加上高度 (以像素为单位) 减去1。

131
00:07:57,660 --> 00:08:02,610
所以这个坐标系会自动发生, 你可以定义这些坐标来

132
00:08:02,610 --> 00:08:07,954
任何东西, 你可以定义这些坐标是任何位置在屏幕上。

133
00:08:07,954 --> 00:08:10,500
所以你的2D 图形, 你正在画图

134
00:08:10,500 --> 00:08:13,470
您的画布可以自动调整大小, 并

135
00:08:13,470 --> 00:08:15,959
重新定位在屏幕上的任何地方只是通过

136
00:08:15,959 --> 00:08:19,906
控制此画布到屏幕的转换。

137
00:08:19,906 --> 00:08:23,579
您还可以通过设置在屏幕坐标中直接工作

138
00:08:23,579 --> 00:08:26,519
一个画布到屏幕的转换, 它使用

139
00:08:26,519 --> 00:08:30,199
与屏幕坐标匹配的画布坐标。

140
00:08:30,199 --> 00:08:34,350
在这种情况下, 你只是设置你的左边缘和你的底部边缘到 x 和 y

141
00:08:34,350 --> 00:08:36,899
你是正确的边缘和你的上边缘 x 和 y

142
00:08:36,899 --> 00:08:40,365
加上宽度减去1和高度减去1。

143
00:08:40,365 --> 00:08:44,602
在这种情况下, 您可以指定基元的坐标在

144
00:08:44,602 --> 00:08:47,100
使用相同坐标的矢量图形

145
00:08:47,100 --> 00:08:50,820
对于它们将被翻译成的像素。

146
00:08:50,820 --> 00:08:54,870
我不建议这样做, 因为当你在屏幕坐标工作,

147
00:08:54,870 --> 00:08:59,870
您将不知道输出屏幕显示设备可能是什么。

148
00:08:59,870 --> 00:09:00,990
可能是手机

149
00:09:00,990 --> 00:09:03,840
它可能是一台电视, 它可能是一只手表,

150
00:09:03,840 --> 00:09:07,725
这可能是一个视频墙-所有这些将有不同的解决方案

151
00:09:07,725 --> 00:09:12,120
你要确保你的二维图形正确显示;

152
00:09:12,120 --> 00:09:16,830
它不太小或太大, 当它显示在不同的设备上。

153
00:09:16,830 --> 00:09:22,379
因此, 最好的工作在一些帆布坐标, 这是方便你, 让

154
00:09:22,379 --> 00:09:25,549
画布到屏幕的转换担心

155
00:09:25,549 --> 00:09:28,950
关于将其转换为相应的像素。

156
00:09:28,950 --> 00:09:31,634
这节课我们都学了什么

157
00:09:31,634 --> 00:09:36,230
我们学了矢量图形
用于描述形状

158
00:09:36,230 --> 00:09:42,139
而光栅图用像素表来
显示这些形状

159
00:09:42,139 --> 00:09:47,345
我们可以设置坐标, 这是方便我们在画布上绘制

160
00:09:47,345 --> 00:09:49,879
这些坐标不同于

161
00:09:49,879 --> 00:09:52,909
用于显示画布的光栅坐标。

162
00:09:52,909 --> 00:09:55,684
我们还能在画布中嵌套画布

163
00:09:55,684 --> 00:09:59,929
这使得我们可以用更方便的方式分割屏幕

164
00:09:59,929 --> 00:10:04,580
为我们建立一个二维可视化显示。

165
00:10:04,580 --> 00:10:08,120
所以我们学会了用矢量图形描述形状,

166
00:10:08,120 --> 00:10:11,564
但我们使用光栅图形显示形状。

167
00:10:11,564 --> 00:10:15,019
我们可以使用光栅图形的坐标系来描述我们的形状,

168
00:10:15,019 --> 00:10:17,674
屏幕像素的坐标系统,

169
00:10:17,674 --> 00:10:22,985
或者, 我们可以用我们的矢量图形的画布坐标来描述它们,

170
00:10:22,985 --> 00:10:30,210
或者我们-我们可以使用任何坐标系统是最方便的, 我们绘制数据。