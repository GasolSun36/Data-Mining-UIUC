1
00:00:00,370 --> 00:00:03,204
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community

2
00:00:07,510 --> 00:00:12,830
当我们用数据可视化工具
来可视化数据库

3
00:00:12,830 --> 00:00:18,080
和数据立方时
这些数据立方就是数据超立方

4
00:00:18,080 --> 00:00:25,900
它们是高维数据库
有非常多维度

5
00:00:25,900 --> 00:00:29,060
其挑战性在于
如何将信息

6
00:00:29,060 --> 00:00:31,980
显示在二维平面上

7
00:00:31,980 --> 00:00:34,950
正如前文 我们可以用
大世界中的小世界

8
00:00:34,950 --> 00:00:39,878
本例中我们将可视化一个
四维的超立方

9
00:00:39,878 --> 00:00:43,130
数据是我们的世界银行指数

10
00:00:43,130 --> 00:00:47,830
我们观察的不仅是
预期寿命和婴儿死亡率对比

11
00:00:47,830 --> 00:00:54,610
还会看到它们在不同地区和
不同年份的变化

12
00:00:54,610 --> 00:00:56,180
这样就有了大世界中的小世界

13
00:00:56,180 --> 00:01:01,780
我们看的是一个四维超立方
这里画了一张表

14
00:01:01,780 --> 00:01:07,060
坐标分别是年度和地区
表中的每个元素本身

15
00:01:07,060 --> 00:01:12,060
都是一个预期寿命和婴儿死亡率
的二维图标

16
00:01:13,340 --> 00:01:19,320
这就给了我们一个四维的视图
我们可以从这个

17
00:01:19,320 --> 00:01:24,830
世界套世界的想法扩展到
范围更广的坐标轴安排上

18
00:01:24,830 --> 00:01:29,180
每个坐标轴表示数据
的不同维度

19
00:01:29,180 --> 00:01:34,170
各维度的关系

20
00:01:34,170 --> 00:01:38,249
在OLAP数据库中通过关键词有效地组织起来

21
00:01:40,090 --> 00:01:43,170
这些数据库可视化系统

22
00:01:43,170 --> 00:01:46,960
有专门设计的工具
来帮助安排坐标轴

23
00:01:46,960 --> 00:01:52,040
尤其是坐标轴常常
被用于显示多个维度

24
00:01:52,040 --> 00:01:57,620
或者表示不同聚合
或者多维度投影

25
00:01:57,620 --> 00:02:02,730
这是为了减少较大
超立方的维度

26
00:02:02,730 --> 00:02:05,820
这些数据行来自关于Polaris的一篇论文

27
00:02:05,820 --> 00:02:10,850
Polaris是一个早期原型系统
是Tableau的前身

28
00:02:10,850 --> 00:02:14,210
你可以把坐标轴连接起来

29
00:02:14,210 --> 00:02:16,310
可以将两个维度

30
00:02:16,310 --> 00:02:22,080
把一个放在另一个后面
这样可以在一单轴上显示

31
00:02:22,080 --> 00:02:24,230
基本上这就为数据提供了
多个视图

32
00:02:24,230 --> 00:02:27,360
例如 这是我们根据季度
画出的销售数据

33
00:02:28,360 --> 00:02:32,160
可以看到在前二季度
销售量较低

34
00:02:32,160 --> 00:02:35,010
然后在三四季度上涨

35
00:02:35,010 --> 00:02:40,670
这样我们可以把
时间维度和产品维度

36
00:02:40,670 --> 00:02:46,230
产品跟在时间的后面

37
00:02:46,230 --> 00:02:51,370
这样我们就对同一份数据
有两个视图 但在前一半里面

38
00:02:51,370 --> 00:02:54,970
我们看到的是相对于时间的数据
根据季度划分

39
00:02:54,970 --> 00:02:59,260
而在后一半里我们看到的是
用同样的数据画的图

40
00:02:59,260 --> 00:03:00,790
却根据产品区分

41
00:03:02,100 --> 00:03:06,690
可以看出销量在时间上
的总体趋势

42
00:03:06,690 --> 00:03:11,880
以及之后的三个
不同产品(的销量趋势)

43
00:03:11,880 --> 00:03:15,310
但也许这更着重于单个产品
而不是其他两个产品

44
00:03:15,310 --> 00:03:15,930
因此

45
00:03:15,930 --> 00:03:20,830
本例中把时间轴和产品轴
连接起来还比较顺理

46
00:03:20,830 --> 00:03:24,450
把季度轴和月度轴
连起来可能就说不通

47
00:03:24,450 --> 00:03:29,370
因为它们都是时间维度

48
00:03:29,370 --> 00:03:34,290
这样会在季度分界线前
以及月度分界线前

49
00:03:34,290 --> 00:03:38,970
看到相同的数据图

50
00:03:38,970 --> 00:03:44,280
而你为此多增加了一半空间

51
00:03:44,280 --> 00:03:47,480
而结果不太合理

52
00:03:47,480 --> 00:03:49,800
我们也可以选择两个维度

53
00:03:49,800 --> 00:03:53,180
然后根据这两个维度的某种组合
创建一个坐标轴

54
00:03:53,180 --> 00:03:57,920
例如 如果我有相对时间的数据
如跨越四个季度

55
00:03:57,920 --> 00:04:03,232
我们有关于产品的数据
那我们可以把咖啡 浓缩咖啡

56
00:04:03,232 --> 00:04:08,793
和茶的产品数据按一季度
二季度 三季度 四季度来显示

57
00:04:08,793 --> 00:04:13,026
而非把按产品类型划分
的数据排到一起

58
00:04:13,026 --> 00:04:17,854
这样得到的结果可以给你
每种咖啡和季度组合的数据

59
00:04:17,854 --> 00:04:22,439
这样就能看到数据随着时间
和产品类型的表现

60
00:04:22,439 --> 00:04:27,428
用一条轴就可以
表示两个维度的数据

61
00:04:27,428 --> 00:04:31,410
一眼看到所有组合

62
00:04:31,410 --> 00:04:34,510
与之相似 我们也可以
来看季度与月份组合的图表

63
00:04:34,510 --> 00:04:38,860
但这同样没什么意义 因为我们
要看的是第一季度

64
00:04:38,860 --> 00:04:42,440
它应该只表示前三个月

65
00:04:42,440 --> 00:04:44,930
但这里我画了
所有的十二个月

66
00:04:44,930 --> 00:04:50,340
所以如果只是将同一产品属性
在两个时间轴展现 并无意义

67
00:04:50,340 --> 00:04:55,290
因为这样我就只有
第一季度的数据显示了

68
00:04:55,290 --> 00:04:59,710
前三个月 而余下九个月
的值则为零

69
00:04:59,710 --> 00:05:03,130
因为没有这几个月的数据

70
00:05:03,130 --> 00:05:04,740
对于第一季度来说也是如此

71
00:05:05,900 --> 00:05:10,120
对本例来说 有用的是
使用嵌套的方法

72
00:05:10,120 --> 00:05:14,190
嵌套是一种把组合限制在

73
00:05:14,190 --> 00:05:17,930
只有数据库中能找到
的组合的范围里

74
00:05:17,930 --> 00:05:24,160
所以在第一季度我们可能
没有茶的销量

75
00:05:24,160 --> 00:05:28,570
在第三季度没有
浓缩咖啡的销量

76
00:05:29,860 --> 00:05:34,850
使用这种嵌套操作
类似于进行单一属性的组合

77
00:05:34,850 --> 00:05:38,510
但无需放入所有可能的组合

78
00:05:38,510 --> 00:05:42,630
在轴上只是显示在数据库中

79
00:05:42,630 --> 00:05:44,250
存在的组合的数据

80
00:05:44,250 --> 00:05:48,750
那么如果我们把月份
嵌套到季度里面

81
00:05:48,750 --> 00:05:51,700
如果你用季度作为主轴

82
00:05:51,700 --> 00:05:54,280
月份作为次轴

83
00:05:54,280 --> 00:05:58,670
那么在第一季度里
我们不是看到一月到六月所有的月份

84
00:05:58,670 --> 00:06:02,440
而只是看到第一季度里
在数据库中有实际数据的

85
00:06:02,440 --> 00:06:04,660
月份

86
00:06:04,660 --> 00:06:08,055
因为第一季度有
一 二 三 共三个月份

87
00:06:08,055 --> 00:06:11,570
我们在这三个月有数据
但四五六月没有

88
00:06:11,570 --> 00:06:15,310
那么我们在第一季度的
四五六月没有数据

89
00:06:15,310 --> 00:06:17,510
因为四五六月属于第二季度

90
00:06:17,510 --> 00:06:21,110
这样就把细分的时间轴
嵌入了粗分的时间轴

91
00:06:21,110 --> 00:06:25,870
形成单一的轴

92
00:06:25,870 --> 00:06:31,520
Tableau有一些功能
可以帮助我们很好地安排轴

93
00:06:31,520 --> 00:06:36,090
如果选择预期寿命数据来显示

94
00:06:36,090 --> 00:06:45,090
就会得到所有国家
关于时间的平均值

95
00:06:45,090 --> 00:06:50,460
我们可以对数据根据国家来去聚合

96
00:06:50,460 --> 00:06:54,198
我们可以得到一个
按国家字母排序的列表

97
00:06:54,198 --> 00:06:59,780
如果想要排得更好些
可以按大洲排列

98
00:07:01,540 --> 00:07:04,130
这样就把大洲显示在顶部

99
00:07:04,130 --> 00:07:06,740
洲内各国按字母顺序排列

100
00:07:06,740 --> 00:07:10,130
然后可以在这里插入一个子区域

101
00:07:10,130 --> 00:07:11,630
对数据按子区域进一步细分

102
00:07:11,630 --> 00:07:16,530
这就得到这样一个非常好的排布
Tableau可以基于这里的数据自动排列

103
00:07:16,530 --> 00:07:20,280
因为这里的数据是按国家

104
00:07:20,280 --> 00:07:22,140
按区域和按子区域来划分的

105
00:07:22,140 --> 00:07:24,969
它也可以探测数据应该如何

106
00:07:24,969 --> 00:07:29,960
根据每个区域在轴上划分层级

107
00:07:29,960 --> 00:07:33,761
也就是先根据区域 然后子区域
然后是国家和地区

108
00:07:33,761 --> 00:07:36,294
我们这里有非洲和东非

109
00:07:36,294 --> 00:07:40,710
以及按字母顺序排列的
东非的所有国家

110
00:07:40,710 --> 00:07:42,580
我们还可以把轴再细分

111
00:07:42,580 --> 00:07:46,410
例如 如果要按年份去聚合

112
00:07:46,410 --> 00:07:49,640
这里每个柱体表示
一年的平均值

113
00:07:49,640 --> 00:07:53,810
如果我们要下钻到
年度的表现数据

114
00:07:53,810 --> 00:07:58,800
我可以加上每个国家
按每个年度的数据

115
00:07:58,800 --> 00:08:04,010
这样对每个国家
就有了其年度的表现数据

116
00:08:04,010 --> 00:08:07,440
这如果换成折线图
可能会看起来更好

117
00:08:07,440 --> 00:08:11,342
这样就可以看到每个国家

118
00:08:11,342 --> 00:08:17,950
在过去11年里 如何提升预期寿命
记录都在这里

119
00:08:17,950 --> 00:08:21,060
你也可以把年度移到中间

120
00:08:21,060 --> 00:08:26,990
这样就看到基于
每个区域的表现

121
00:08:26,990 --> 00:08:32,760
这就是某个区域内每个国家
在一年中的表现情况

122
00:08:32,760 --> 00:08:36,890
最后你还可以把年度整个移走

123
00:08:36,890 --> 00:08:41,730
现在我们看的就是每年中
按国家的不同细分

124
00:08:44,260 --> 00:08:50,340
这样可以设置轴的层级关系
得到这种嵌套的结果

125
00:08:50,340 --> 00:08:57,140
你甚至可以把它放到垂直轴上
得到数据的高维视图

126
00:08:57,140 --> 00:09:02,950
即通过实现一种
世界嵌套世界的可视化

127
00:09:02,950 --> 00:09:05,920
这里你有以表格呈现的
一系列图表

128
00:09:05,920 --> 00:09:10,452
而且每个二维数据的元素本身
是一个二维图

129
00:09:10,452 --> 00:09:15,510
或者一个二维表格
或者本例中的二维柱状图

130
00:09:15,510 --> 00:09:19,749
我们由此看到信息可视化系统
为数据库可视化

131
00:09:19,749 --> 00:09:22,247
而专门设计

132
00:09:22,247 --> 00:09:26,032
尤其是针对OLAP数据立方
样式的数据库

133
00:09:26,032 --> 00:09:30,661
同时也为数据库用户提供了
可视化的工具以对数据进行深入探究

134
00:09:30,661 --> 00:09:40,182
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community