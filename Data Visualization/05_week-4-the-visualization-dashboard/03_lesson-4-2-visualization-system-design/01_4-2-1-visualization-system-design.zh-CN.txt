[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community 现在我们已经理解了信息可视化 我们可以开始思考该如何设计一个信息 可视化系统 当创建一个可视化系统时 你其实就是在创造用户界面 这是用户和电脑促进生成的数据之间的界面 所以数据可视化系统其实就是用户界面 你使用电脑来用图表表示数据 因此用户界面的设计原理对建设一个好的 有效的可视化系统是很重要的 现在你已经对这个系统有所了解 如图像在系统中的运作以及我们如何在系统中显示数据 在课程的第一模块中 你也了解到了用户是如何与系统交互的 我们也需要来专注下目标 用户想要达到的目标是什么 以及他们为了达到目的所要完成的任务 当然还有交互 我们需要能够表示和理解用户与系统的交互 比如 描述一段对话 或是一段让用户点击和选择的一段话等 以便能让用户用直觉的 有成效的方式完成任务 我们会按照标准的顺序来完成一个系统设计 设计一个可视化系统和设计软件系统或 其他一般的系统很类似 我们从基本的需求说明开始 其实就是尝试弄明白这个系统 要解决哪些问题 系统会为谁服务 那个人怎么样才能根据你设计的可视化系统 做出决策 这需要你和用户大量沟通 我看到过有利用专题小组座谈或用户采访的 但用户采访时重要的是不要询问用户 他们想要哪种界面或可视化系统 因为你将是设计该可视化系统的专家 通常用户不会知道现在的情况和有什么可选 最适合他们的是什么
所以你应该问一些他们想回答的 关于系统的问题
并且如何更好地传递给他们信息 以使他们有足够的信息来回答那些问题 然后是构架设计 这相当于把完整的系统分解成不同的分系统 如果你在做一个可视化仪表盘 那么这里的分系统指的就是仪表盘上的单个组件 就是分系统的设计了 你需要弄清楚如何实现单个的组件 然后就是具体实施
通过具体的编码或 或建立系统来真正地实现这些组件 然后你调试这些组件 接下来很重要的一步是用户评估 这些组件齐备之后 你需要确保与用户一起 测试这些组件 并确保所有各组件按要求正常运行 用户也是按你预计的方式来使用它们 当然你也要用一些统计数据来确保
你的评估 不是建立在猜测上 而是用户确实在有效的使用这个系统 最后市系统维护的文档和维修 理解这个过程很容易
但当人们估算 需要多久来实现这个系统时
往往只注重实施阶段的时间 而你会看到实施也许只是七个步骤之一 这也是为什么我们说 在我们设计软件系统
或用户交互界面 或者 可视化系统的时候
你需要在你认为需要的总的时间上 再加倍 这加倍的时间
你将意识到你终会用在 做一些调试或者组件的设计上 然后你还需要把时间翻倍
因为你也需要时间做一些分析 以及需求说明 系统评估和维护等 所以 如果只考虑实施阶段
我们通常会低估时间 实际需要耗费六至八倍的时间
来真正组建一个系统 以确保系统正确 关于创造这个系统的一些其他的建议
是使用概念设计或雏形设计 我们在最后谈到用户的评估
但是你应该 在制作系统的每一个阶段上进行用户评估和测试 利用模拟用户或是真正的用户 所以在制定用户说明时 你需要利用雏型
来模拟实际系统将是如何工作的 之后进行构架设计 对于构架设计 你也许需要有制作一些草图 来表示可能的用户界面 并呈现给用户 以确认系统符合用户需求 或者 在一些特例中
你可能甚至用一个绿野仙踪般神奇的系统 来模拟系统
而不需要照实际系统那样运行 你可以通过预设值使系统工作 如在一生物系统进行组件设计中会遇到 在实际实施系统之前
通过仿真来验证 设计将符合要求 你不需要总是回到用户那里来获得答案 通常 特别是在系统设计阶段 你能使用任务以及对话框的模型 所以这个基于需求说明的用户模型 能帮助你了解用户实际需要实现的目标 你可开始分解任务 并且开始进行组件布局的分析任务 以确定它们符合指定的需求 最后 就像我之前提到过的 不要等待到最后 才进行组件测试 在你建好用户模型 对话框 和任务之后 你需要对其中每一项进行测试 你可以在启动实施工作之前即 开始测试你的设计 所以对于用户模型
有许多不同的技术来实现 你要专注于用户需要什么去回答一个问题 你需要提供可视化来帮助用户回答问题 你并不一定要制作最漂亮的可视化界面 或者使用在电脑系统上所有的功能 你需要知道用户在想什么 尝试从用户的角度来看系统
而不是 比如说 从程序员的角度来看
或者系统设计者的角度 你想要了解你的用户 用户熟悉什么? 他们在用其他什么工具? 用户在其他用户中扮演什么角色 或是在他们的机构中扮演什么角色? 用户可能知道什么以及用户可能不理解什么? 最后 用户使用这个系统的动机是什么? 你能最好以什么方式提供给用户信息 来方便用户使用系统并且知道如何合理的使用 最后 进行认知调查是有益的 把你自己放在用户的角度来制定出详细的图表 想象一下 当用户使用你的可视化系统的时候
他们脑海中在想什么 这样你就能够基于用户目前的关注的
更好展现数据 用户建模的方法有很多
其中一个使用很久的方法 叫做GOMS GOMS 四个字母分别代表目标 操作者 方法和选择 这能够帮助你了解一个用户的可能想法 用户是目标导向的
所以为整个系统规划蓝图 系统中建造了幻觉。 在你设计这个系统的时候
想想操作者会怎么做也是十分有益的 有些什么操作 即用户需要哪些基本的操作来实现目标? 用户将结合这些操作来形成方法 也许有多种方法来实现目标 你将支持哪一个方法 去尝试支持更多 给猫剥皮往往有很多方法 使用者将会有不同的方法来实现一个目标 这种支持越灵活越好 最后一步 选择 如果有多重方法 那么
用户就有多重方式选择使用哪一种方法 这时你要提供尽量详尽的信息 以帮助用户做出最合适的选择 用户有一个目标 且每个目标都有一个或者 多个相关任务 所以你要确保你的系统能够将任务变成目标 这就是用户界面设计的原则 叫做"可综合性" 如果你有一个可视化面板的话 用户在这个面板前是否知道如何使用这个系统
来获得答案? 用户是否可以通过面板提供的信息 而得出有关结论? 这些任务还会变的复杂 所以你需要简化
将任务变成子任务 目标变成子目标 之后任务将会有一定的顺序
这个顺序就是计划 那么 你将如何清楚的表达这个计划 以便使用户通过你的可视化系统
可以进行综合? 如果需要进行选择的话
你也许需要考虑条件性任务 条件性任务的触发点是什么？ 什么时候需要开子窗口? 什么时候一些操作可以省去? 你可能还得考虑等待时间
信息处理的延迟 或者什么时候用户被打断
或者循环任务 并行任务等 之后你可根据这些结果来实现最好的界面 以帮助用户获得他们需要的信息 来做出一个明智的决定 这里有一些面板的例子 这是一个旧的可视面板图 出自2001的 SIGCHI （人机交互特别兴趣群体） 但是它在现在依旧能被使用 它可用于监管在线会话和新闻组讨论 我们有这种面板15年甚至更长的时间了 依旧使用良好 最初它是一种基于主体对话的线程树 即用户对主体进行回应 有人先对原始的主体回应 然后其他的人则对初始的回应再回应 所以你得到类似如树的表现 这种组织是按时间顺序的 纵向的 也就形成了基于回应的层次结构 哪些信息回应了其它哪些信息呢? 这里还有用户信息
用户的信息表示在这第二个可视化图中 你就有了类似如甘特图的图形 也被叫做钢琴卷 这基本对应于横向是随时间而发布的信息 而纵向则是依发布的信息条数来排序 然后你就能获得这个社会关系网图
在这个情况下就是个社交网络 只是一个基于谁对谁的信息有回应的图表 至于节点的水平位置和垂直位置 在水平方向上的数字表示每一个人发出的回应 垂直方向上的数字则表示收到回应 所以这种原始的张贴能收到很多的回应 而其余的也有一些回应 最后我们想要根据需要来获取细节 你可以选择细节
你可以在这选择一个节点 你可在这选择某个人
在这线索树中就被高亮显示 你可以在这里选择单独的节点 并且会看到实际的张贴以便获取这些细节 另外一个界面的例子是CDC 疾病控制中心
FluView 展示的是流感每年在美国的传播 以及是哪类流感在流行 所以你能看到流感发生的高峰期
和是哪类流感 这里有一张图
你按地域来看数据 比如说 这里是伊利诺伊大学所在的地方 我能看到我得注意哪种的流感 以及什么时候得注意 然后我可以基于这些数据来确定 我本人或其他人可能获得流感的可能性 这里也是伊利诺伊大学厄香槟校区大学的 一个策略计划版图 我们有一个策略计划其包几个部分 比如说 扶植奖学金 发现创新 提供变革性的学习经验 社会影响 管理资源 之后我们在界面上 可以选择独立的图表 这些图表可告诉我们每一部分的情况 但是图表并不仅仅提供原始数据 比方说 他们还提供
我们在某些部分的目标 在某些情况下
我们所作的比预期目标好 在其他一些情况下 我们则没有达到目标 所以图表能激励我们将工作做得更好 所以遵循这些设计的规则
这些设计可视化系统的顺序 你能开始设计你自己的 基于你自己的数据的 可视化界面
以便你能使用它更好的做出决策 [背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community