1
00:00:00,012 --> 00:00:03,692
[MUSIC]

2
00:00:08,127 --> 00:00:11,037
So when we visualize data
organized as a graph,

3
00:00:11,037 --> 00:00:14,030
we'll likely want to
lay it out in a plane.

4
00:00:14,030 --> 00:00:17,699
There's a kind of graph that
enables that called a planar graph.

5
00:00:19,270 --> 00:00:23,980
So as we saw before we're going to
represent data items as nodes and

6
00:00:23,980 --> 00:00:29,340
edges between nodes will represent
relationships between those data items.

7
00:00:29,340 --> 00:00:33,322
In some cases we'll have a graph,
a planar graph for example.

8
00:00:33,322 --> 00:00:39,900
A planar graph can be drawn such that the
edges connecting the nodes don't cross.

9
00:00:39,900 --> 00:00:41,840
That's called a planar embedding.

10
00:00:41,840 --> 00:00:43,190
The same planar graph,

11
00:00:43,190 --> 00:00:48,570
in this case you've got the same foreign
nodes connected by the same five edges.

12
00:00:48,570 --> 00:00:52,470
In this non planar
embedding the edges cross.

13
00:00:52,470 --> 00:00:54,980
And so, the same graph,
they're both planar graphs.

14
00:00:54,980 --> 00:00:57,240
What we'd like to do is be
able to find the embedding,

15
00:00:57,240 --> 00:01:00,400
the way to lay out the nodes so
that the edges don't cross, so

16
00:01:00,400 --> 00:01:04,570
it'll be clearer to the observer,
the relationship between the nodes.

17
00:01:05,970 --> 00:01:06,567
So we can do this.

18
00:01:06,567 --> 00:01:08,490
We can do this for very large graphs.

19
00:01:08,490 --> 00:01:14,170
For example, here's a triangle mesh
representing a geometric object.

20
00:01:14,170 --> 00:01:17,440
It's a triangle mesh, so
the vertices are nodes and

21
00:01:17,440 --> 00:01:20,800
the edges of the triangles form
the edges between the nodes.

22
00:01:20,800 --> 00:01:26,600
This graph, this large graph of
50,000 nodes is not a planar graph,

23
00:01:26,600 --> 00:01:31,720
but if I make cuts in it, if I separate
the faces and duplicate edges,

24
00:01:31,720 --> 00:01:37,020
I can turn it into a planar graph just by
making these cuts along the black lines.

25
00:01:37,020 --> 00:01:41,713
And as a planar graph, I can then find
a way of embedding it into the plane so

26
00:01:41,713 --> 00:01:43,627
that the edges don't cross.

27
00:01:43,627 --> 00:01:47,326
There's so many nodes and so
many edges in this this graph and

28
00:01:47,326 --> 00:01:51,620
it's hard to see all of the edges,
so trust me that they don't cross.

29
00:01:51,620 --> 00:01:54,570
Hopefully you'll be working
with fewer nodes and edges so

30
00:01:54,570 --> 00:01:58,020
that your layouts will be
a little more clear than this.

31
00:01:58,020 --> 00:02:01,996
So there's a way we can find these
embeddings automatically, and

32
00:02:01,996 --> 00:02:06,611
it's called Tutte's Method, and it
starts by picking some of your nodes and

33
00:02:06,611 --> 00:02:09,316
defining where they
should be in the layout.

34
00:02:09,316 --> 00:02:14,292
So in this case, I'm going to use eight
nodes, 12 edges that make a cube,

35
00:02:14,292 --> 00:02:17,264
and I'm going to take
these first four nodes,

36
00:02:17,264 --> 00:02:21,940
and I'm going to find positions for
them in for example an SVG Canvass.

37
00:02:21,940 --> 00:02:27,060
I'm going to position node 1 at (0,0),
node 2 at (1,0),

38
00:02:27,060 --> 00:02:30,800
node 3 at (0,1), and node 4 at node (1,1).

39
00:02:30,800 --> 00:02:35,780
And then I'm going to try to figure out
where do I want to position nodes 5, 6, 7,

40
00:02:35,780 --> 00:02:40,080
and 8, in order to make a plainer
embedding of this graph.

41
00:02:40,080 --> 00:02:43,560
This graph is shown in
a non planar embedding,

42
00:02:43,560 --> 00:02:45,490
because we've got edge crossings.

43
00:02:45,490 --> 00:02:47,770
We want to find out how to
make a planar embedding of it.

44
00:02:49,150 --> 00:02:52,395
So in order to do this automatically for
any graph,

45
00:02:52,395 --> 00:02:55,194
we're going to need to
solve a linear system.

46
00:02:55,194 --> 00:02:57,120
So we'll create a matrix.

47
00:02:57,120 --> 00:02:58,920
In fact, an adjacency matrix,

48
00:02:58,920 --> 00:03:02,820
a special kind of adjacency
matrix called a Laplacian matrix.

49
00:03:02,820 --> 00:03:06,030
So it's an adjacency matrix which means,

50
00:03:06,030 --> 00:03:12,094
I'm going to take one node to another node
in case of node 1 is connected to node 2,

51
00:03:12,094 --> 00:03:17,310
so in row one, column two,
I'm going to have a non zero entry.

52
00:03:17,310 --> 00:03:21,110
In this case, the non zero entry
is going to be 1 over the degree.

53
00:03:21,110 --> 00:03:23,820
The node one has degree three,

54
00:03:23,820 --> 00:03:28,500
it has three edges extending from it,
so I'll put a one-third there.

55
00:03:28,500 --> 00:03:33,480
And so node 1 is connected to nodes 2,
3, and 5,

56
00:03:33,480 --> 00:03:38,272
and so I'll put one-third in columns two,
three, and

57
00:03:38,272 --> 00:03:42,180
five, and node one isn't
connected to the other nodes.

58
00:03:42,180 --> 00:03:47,843
So in those columns including node one,
in those columns I'll put a zero.

59
00:03:47,843 --> 00:03:52,707
The nice thing about the Laplacian
form of an adjacency

60
00:03:52,707 --> 00:03:57,690
matrix is the for
node 1 I'm connected to three items.

61
00:03:57,690 --> 00:03:59,090
My degree is three.

62
00:04:00,450 --> 00:04:03,156
The value I'm putting in
is one over the degree.

63
00:04:03,156 --> 00:04:07,730
So if I add all of the elements up for
row one I get one.

64
00:04:11,775 --> 00:04:16,521
So no we're going to create a special
matrix from that Laplacian adjacency

65
00:04:16,521 --> 00:04:17,140
matrix.

66
00:04:17,140 --> 00:04:18,350
We'll just call this matrix A.

67
00:04:19,630 --> 00:04:22,840
First thing I'm going to do is I'm
going to take that Laplace matrix, and

68
00:04:22,840 --> 00:04:27,000
I'm going to zero out all of the rows for
the nodes I've already assigned.

69
00:04:27,000 --> 00:04:31,889
So I've already assigned Node 1,
2, 3, and 4 a position.

70
00:04:31,889 --> 00:04:34,913
So I'll just zero those out
in my adjacency matrix,

71
00:04:34,913 --> 00:04:37,950
subtract the whole thing
from the identity matrix.

72
00:04:37,950 --> 00:04:42,960
The identity matrix just has ones down
the diagonal and zeros everyplace else.

73
00:04:44,370 --> 00:04:47,920
That will give me this matrix
A that I'm going to solve

74
00:04:47,920 --> 00:04:52,395
in order to find the placements for
nodes 5, 6, 7, and 8.

75
00:04:52,395 --> 00:04:55,530
So I need to set up a linear system,
and so

76
00:04:55,530 --> 00:05:00,791
we'll set up a linear system for
the x coordinates of our nodes, and

77
00:05:00,791 --> 00:05:05,981
then we'll set up a separate linear
system for the y coordinates.

78
00:05:05,981 --> 00:05:09,880
So the linear system we use for
the x coordinates looks like this.

79
00:05:09,880 --> 00:05:14,120
It's my matrix A, and
then I've got times x,

80
00:05:14,120 --> 00:05:18,810
a column vector that's just the x
coordinates of my nodes, and

81
00:05:18,810 --> 00:05:23,130
then finally I've got the answer, what
the x coordinates actually should be in

82
00:05:23,130 --> 00:05:27,100
the case of the first four nodes and
then zeros for the nodes I want to solve.

83
00:05:27,100 --> 00:05:34,410
So this is saying that one times x one,
the x coordinate of node one,

84
00:05:34,410 --> 00:05:38,510
one time x one and
zero times everything else equals zero.

85
00:05:38,510 --> 00:05:39,950
Because that what I've assigned.

86
00:05:39,950 --> 00:05:44,280
So here I've got node 0,
node 1, nodes 2 and node 3,

87
00:05:44,280 --> 00:05:48,370
these are the x coordinates of node 1,
2, 3, and 4.

88
00:05:48,370 --> 00:05:52,700
And so here I've got one, this second row.

89
00:05:52,700 --> 00:05:59,555
1 times x2 is equal to 1, and the x
coordinate of a sine for node two is one.

90
00:05:59,555 --> 00:06:03,815
So that's what I put
in these first entries

91
00:06:03,815 --> 00:06:09,255
of this bx column vector, and
the remaining entries are just zero.

92
00:06:09,255 --> 00:06:13,365
The nice thing here is that
if we look at row five,

93
00:06:13,365 --> 00:06:19,007
row five says that the x
coordinate of node 5, x5,

94
00:06:19,007 --> 00:06:25,073
one times x5 minus one-third times x1,

95
00:06:25,073 --> 00:06:29,160
minus one-third times x6,

96
00:06:29,160 --> 00:06:33,320
minus one-third times x7,
is going to be equal to zero.

97
00:06:34,570 --> 00:06:38,501
That's basically setting
up a linear equation so

98
00:06:38,501 --> 00:06:44,503
that wherever I position nodes 6 and
7, they're going to impact node 5.

99
00:06:44,503 --> 00:06:50,042
Once we do that for rows five, six, seven,
and eight corresponding to nodes 5,

100
00:06:50,042 --> 00:06:54,938
6, 7, and 8, and when we solve this
system we'll have positions for

101
00:06:54,938 --> 00:06:58,910
nodes 5, 6, 7, and
8 that solve that relationship.

102
00:07:00,530 --> 00:07:02,470
Do the same thing for the y coordinates.

103
00:07:02,470 --> 00:07:07,389
So now my by column vector is equal
to the y coordinates for nodes 1, 2,

104
00:07:07,389 --> 00:07:12,166
3 and 4 that I've placed, and
then add zeroes for everything else.

105
00:07:12,166 --> 00:07:15,550
Node 1 has zero for the y coordinate.

106
00:07:15,550 --> 00:07:18,395
Node 2 has zero for the y coordinate.

107
00:07:18,395 --> 00:07:24,272
Node 3 has one for the y coordinate, and
node 4 has one for the y coordinate,

108
00:07:24,272 --> 00:07:30,075
and this is basically saying that y1 = 0,
y2 = 0, y3 = 1, y4 = 1.

109
00:07:30,075 --> 00:07:32,845
But it's saying that the y coordinate for

110
00:07:32,845 --> 00:07:38,148
node 5 is equal to whatever the y
coordinate is for node 5, minus one-third,

111
00:07:38,148 --> 00:07:43,688
times the y coordinate for node 1, minus
one-third the y coordinate for node 6,

112
00:07:43,688 --> 00:07:49,419
and minus one-third the y coordinate for
node 7, and so on for the remaining nodes.

113
00:07:52,663 --> 00:07:56,640
So I've basically setup these
equations for the x system.

114
00:07:56,640 --> 00:08:01,473
I said x1 is equal to zero, x2 is
equal to one, x3 is equal to zero, and

115
00:08:01,473 --> 00:08:03,510
x4 is equal to one.

116
00:08:03,510 --> 00:08:09,190
And then I've set up these equations for
the x coordinates of the remaining.

117
00:08:09,190 --> 00:08:12,260
I've set up similar equations for
the y coordinate.

118
00:08:14,560 --> 00:08:19,019
So if I group these together,
I basically position x1 and

119
00:08:19,019 --> 00:08:24,298
y1 at the xy coordinates for
node 1 at (0, 0), node 2 at (1,

120
00:08:24,298 --> 00:08:28,757
0), node 3 at (0, 1),
node 4 at (1, 1), and

121
00:08:28,757 --> 00:08:33,602
I've set up these relationships for
remaining coordinates.

122
00:08:33,602 --> 00:08:36,350
Now, you might notice something here.

123
00:08:36,350 --> 00:08:43,020
I'm basically saying that node 5
It's going to be node 1's position

124
00:08:43,020 --> 00:08:48,780
plus node 6 position plus node
7 position divided by three.

125
00:08:48,780 --> 00:08:53,777
So basically the position of each node is
going to be the average of the position

126
00:08:53,777 --> 00:08:58,473
of its neighboring nodes that it shares
an edge with, and that's true for

127
00:08:58,473 --> 00:09:00,160
all the remaining nodes.

128
00:09:00,160 --> 00:09:03,238
And so we fix the position,
we set the position for

129
00:09:03,238 --> 00:09:06,170
some of our nodes and
then the remaining are just

130
00:09:06,170 --> 00:09:10,290
going to be set to be the average
of the nodes that are connected to.

131
00:09:12,540 --> 00:09:16,627
And so if I solve that system, if I
solve that linear system you can use any

132
00:09:16,627 --> 00:09:21,201
numerical methods you like to solve that
matrix problem, you get the solution.

133
00:09:21,201 --> 00:09:24,918
So that node 5 is at (1/3, 1/3).

134
00:09:24,918 --> 00:09:27,703
Node 6 is at (2/3, 1/3).

135
00:09:27,703 --> 00:09:32,954
Node 7 is at (1/3, 2/3), and
node 8 is at (2/3, 2/3).

136
00:09:32,954 --> 00:09:37,847
And so each of these nodes ends up being
at the average, the position of node five

137
00:09:37,847 --> 00:09:43,080
is equal to the average, the centroid
of node one, node six, and node seven.

138
00:09:43,080 --> 00:09:48,706
So I take node 1 plus the position of
node 6 plus the position of node 7,

139
00:09:48,706 --> 00:09:51,490
divide by three, and I get node 5.

140
00:09:52,670 --> 00:09:57,049
So we've solved for
these positions of node 5, 6, 7, and

141
00:09:57,049 --> 00:10:01,766
8 to find this planar layout of this
graph shown here in a non planar

142
00:10:01,766 --> 00:10:04,650
embedding by solving a matrix problem.

143
00:10:04,650 --> 00:10:07,800
You don't have to solve a matrix
necessarily to do this.

144
00:10:07,800 --> 00:10:12,680
You can do the same thing by basically
starting with your nodes 1, 2,

145
00:10:12,680 --> 00:10:17,710
3, 4 in their fixed position, and
then for all the remaining nodes,

146
00:10:17,710 --> 00:10:22,940
you can assign them random positions
to begin with and then iteratively,

147
00:10:22,940 --> 00:10:28,380
replace those node positions with
the average of their neighboring nodes.

148
00:10:28,380 --> 00:10:31,520
And if you continually
replace every node's position

149
00:10:31,520 --> 00:10:34,480
with the average of it's
neighboring node's position,

150
00:10:34,480 --> 00:10:37,530
those nodes'll work into
place where they belong.

151
00:10:37,530 --> 00:10:42,040
And so you can solve this system
without setting up a matrix

152
00:10:42,040 --> 00:10:45,780
just by constantly doing
that iterative procedure

153
00:10:45,780 --> 00:10:49,330
of moving every node to the average
of it's neighboring nodes.

154
00:10:52,158 --> 00:10:56,558
So Tutte's method tells us that we can
solve a linear system to embed a planar

155
00:10:56,558 --> 00:10:59,290
graph, but it's not that difficult.

156
00:10:59,290 --> 00:11:02,990
You can do the exact same
thing by nailing down

157
00:11:02,990 --> 00:11:05,890
a few of your nodes into fixed positions.

158
00:11:05,890 --> 00:11:07,450
And then the rest of the nodes,

159
00:11:07,450 --> 00:11:11,390
you just replace their position with
average of their neighbor's positions,

160
00:11:11,390 --> 00:11:14,670
the positions of the neighbors
that share an edge with that node.

161
00:11:14,670 --> 00:11:19,503
If you keep doing that over and over,
those nodes will relax into the exact same

162
00:11:19,503 --> 00:11:22,593
position that tutte's
method will converge to.

163
00:11:22,593 --> 00:11:31,709
[MUSIC]